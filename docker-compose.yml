services:
  # frontend:
  #   build:
  #     context: ./frontend
  #   container_name: frontend
  #   ports:
  #     - '5173:5173'
  #   networks:
  #     - app-network
  #   depends_on:
  #     - backend-service-question
  #     - backend-service-user
  #     - backend-service-matching

  nginx:
    image: nginx:alpine
    ports:
      - '8080:80'
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend/nginx/includes:/etc/nginx/includes:ro
    networks:
      - app-network
    depends_on:
      - backend-service-user
      - backend-service-question
      - backend-service-matching
      - backend-service-room
      - backend-service-history
      - backend-service-collaborative-editor
      - backend-service-code-execution
      - backend-service-video

  backend-service-question:
    build:
      context: ./backend/service-question
    container_name: backend-service-question
    networks:
      - app-network
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/
      - SPRING_DATA_MONGODB_DATABASE=question_db
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - app-network
    environment:
      MONGO_INITDB_DATABASE: question_db
      MONGODB_ENABLE_LOGGING: 1
    volumes:
      - ./backend/mongoDB/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_data:/data/db

  backend-service-user:
    build:
      context: ./backend/service-user
    container_name: backend-service-user
    networks:
      - app-network
    depends_on:
      - backend-service-user-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://backend-service-user-db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

  backend-service-user-db:
    image: postgres:16-alpine
    container_name: backend-service-user-db
    networks:
      - app-network
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - ./backend/service-user/seed/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data

  backend-service-matching:
    build:
      context: ./backend/service-matching
    container_name: backend-service-matching
    networks:
      - app-network
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      DEPLOYMENT_ENV: docker
    depends_on:
      - rabbitmq

  backend-service-room:
    build:
      context: ./backend/service-room
    container_name: backend-service-room
    networks:
      - app-network
    depends_on:
      - rabbitmq
      - backend-service-room-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://backend-service-room-db:5432/room-db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest

  backend-service-room-db:
    image: postgres:16-alpine
    container_name: backend-service-room-db
    networks:
      - app-network
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: room-db
      POSTGRES_USER: postgres
    volumes:
      - room_postgres_data:/var/lib/postgresql/data
      - ./backend/service-room/seed/init.sql:/docker-entrypoint-initdb.d/init.sql

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  backend-service-history:
    build:
      context: ./backend/service-history
    container_name: backend-service-history
    networks:
      - app-network
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://backend-service-history-db:27017/
      SPRING_DATA_MONGODB_DATABASE: history_db
    depends_on:
      - backend-service-history-db

  backend-service-history-db:
    image: mongo:latest
    container_name: backend-service-history-db
    networks:
      - app-network
    environment:
      MONGO_INITDB_DATABASE: history_db
      MONGODB_ENABLE_LOGGING: 1
    volumes:
      - ./backend/service-history/seed/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - history_mongodb_data:/data/db

  backend-service-collaborative-editor:
    build:
      context: ./backend/service-collaborative-editor
    container_name: backend-service-collaborative-editor
    networks:
      - app-network

  backend-service-code-execution:
    build:
      context: ./backend/service-code-execution
    environment:
      NODE_ENV: production
      PORT: 8080
    container_name: backend-service-code-execution
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend-service-video:
    build:
      context: ./backend/service-video
    container_name: backend-service-video
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  history_mongodb_data:
  room_postgres_data:
